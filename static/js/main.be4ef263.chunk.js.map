{"version":3,"sources":["app/components/RoomDetail.js","app/components/DateSelector.js","app/components/Billing.js","app/components/Booking.js","app/App.js","serviceWorker.js","index.js"],"names":["Select","_ref","selectedValue","options","onDataChange","react_default","a","createElement","onChange","_ref2","value","target","map","option","key","name","occupantOptions","roomTypeOptions","RoomDetail","props","roomType","occupants","onRoomTypeChange","onOccupantsChange","RoomDetail_Select","DateSelector","checkinDate","checkoutDate","totalDays","onCheckinChange","onCheckoutChange","invalidRange","react_datepicker_min_default","selected","Billing","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","roomCharge","occupantCharges","totalRoomCharges","totalOccupantCharges","discount","grandTotal","afterTax","Math","ceil","Component","_MS_PER_DAY","Booking","setState","today","Date","checkout","setDate","getDate","style","backgroundColor","components_DateSelector","components_RoomDetail","components_Billing","b","utc1","UTC","getFullYear","getMonth","utc2","floor","dateDiffInDays","App","components_Booking","Boolean","window","location","hostname","match","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.be4ef263.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nconst Select = ({selectedValue, options, onDataChange}) => (\r\n    <select onChange={ ({target: {value}}) => onDataChange(value) }\r\n            value={selectedValue}\r\n    >\r\n        {\r\n            options.map(option => (\r\n                <option value={option.value} \r\n                        key={option.name}\r\n                        \r\n                        \r\n                >\r\n                    {option.name}\r\n                </option>\r\n            ))\r\n        }\r\n    </select>\r\n)\r\n\r\n// function range(start, end) {\r\n//     return (new Array(end - start + 1)).fill(undefined).map((_, i) => i + start);\r\n// } \r\n\r\n// const occupants = range(1, 4).map (occupants => ({name: occupants, value: occupants}));\r\n\r\n\r\nconst occupantOptions = [\r\n            {name: '1', value: 1},\r\n            {name: '2', value: 2},\r\n            {name: '3', value: 3},\r\n            {name: '4', value: 4},\r\n]\r\n\r\n\r\nconst roomTypeOptions = [\r\n    {name: 'Standard', value: 'Standard'},\r\n    {name: 'Delux', value: 'Delux'}\r\n]\r\n\r\n\r\n const RoomDetail = (props) => {\r\n        const {\r\n            roomType,\r\n            occupants,\r\n            onRoomTypeChange,\r\n            onOccupantsChange\r\n        } = props;\r\n        return (\r\n            <div>\r\n                <h2>Room Details</h2>\r\n\r\n                <label>Room Type</label>\r\n                <Select selectedValue={roomType}\r\n                        options={roomTypeOptions} \r\n                        onDataChange={onRoomTypeChange}\r\n                        />\r\n\r\n                <label>Occupants</label>\r\n                <Select selectedValue={occupants}\r\n                        options={occupantOptions}\r\n                        onDataChange={onOccupantsChange}\r\n                        />\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\nexport default RoomDetail;","import React, { Component } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport DatePicker from \"react-datepicker\";\r\n \r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n \r\n\r\nconst  DateSelector = (props) => {\r\n        let {\r\n            checkinDate,\r\n            checkoutDate,\r\n            totalDays,\r\n            onCheckinChange,\r\n            onCheckoutChange,\r\n            invalidRange\r\n        } = props;\r\n        return (\r\n            <div>\r\n                <h2>Date Range</h2>\r\n\r\n                <DatePicker\r\n                    selected={checkinDate}\r\n                    onChange={onCheckinChange}\r\n                />\r\n\r\n                <DatePicker\r\n                    selected={checkoutDate}\r\n                    onChange={onCheckoutChange}\r\n                />\r\n\r\n                <span> {totalDays} nights </span>\r\n\r\n                { invalidRange && <p>Invalid Date Range</p> }\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\nDateSelector.propTypes = {\r\n    checkinDate: PropTypes.instanceOf(Date).isRequired,\r\n    checkoutDate: PropTypes.instanceOf(Date).isRequired,\r\n    onCheckinChange: PropTypes.func.isRequired,\r\n    onCheckoutChange:PropTypes.func.isRequired,\r\n    totalDays: PropTypes.number.isRequired\r\n}\r\n\r\nexport default DateSelector;","import React, { Component } from 'react';\r\n\r\nclass Billing extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            roomCharge: 0,\r\n            occupantCharges: 0,\r\n            totalRoomCharges: 0,\r\n            totalOccupantCharges: 0,\r\n            discount: 0,\r\n            grandTotal: 0,\r\n            afterTax: 0\r\n        }\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const {\r\n            roomType,\r\n            totalDays,\r\n            occupants\r\n        } = props;\r\n\r\n        const roomCharge = roomType == 'Standard'? 2000 : 4000;\r\n        const occupantCharges = occupants == 1? 0: (occupants - 1) * 200;\r\n        const totalRoomCharges = totalDays * roomCharge;\r\n        const totalOccupantCharges = totalDays * occupantCharges;\r\n\r\n        const discount = totalDays >= 5? 15: 0;\r\n        const grandTotal = Math.ceil(totalRoomCharges - (totalRoomCharges * discount / 100.0))\r\n\r\n        const afterTax = (totalOccupantCharges + grandTotal) * 1.18;\r\n\r\n        \r\n        return {\r\n            roomCharge,\r\n            occupantCharges,\r\n            totalRoomCharges,\r\n            totalOccupantCharges,\r\n            discount,\r\n            grandTotal,\r\n            afterTax\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Summary</h2>\r\n\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Room Charges</td>\r\n                            <td>{this.state.roomCharge} INR</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Nights</td>\r\n                            <td>{this.props.totalDays} nights</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Total Room Charges</td>\r\n                            <td>{this.state.totalRoomCharges} INR</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Discount</td>\r\n                            <td>{this.state.discount} %</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Grand Total With Discount</td>\r\n                            <td>{this.state.grandTotal} INR </td>\r\n                        </tr>\r\n                        \r\n                        <tr>\r\n                            <td>Total Occupants</td>\r\n                            <td>{this.props.occupants}</td>\r\n                        </tr>\r\n\r\n                        <tr>\r\n                            <td>Occupant Charges</td>\r\n                            <td>{this.state.occupantCharges} INR per day</td>\r\n                        </tr>\r\n\r\n\r\n                        <tr>\r\n                            <td>Total Occupant Charges</td>\r\n                            <td>{this.state.totalOccupantCharges} INR</td>\r\n                        </tr>\r\n  \r\n                        <tr>\r\n                            <td>After Tax ( +18% GST) </td>\r\n                            <td>{this.state.afterTax} INR </td>\r\n                        </tr>\r\n                        \r\n                        \r\n                    </tbody>\r\n                </table>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Billing;","import React, { Component } from 'react';\r\n\r\nimport RoomDetail from './RoomDetail';\r\nimport DateSelector from './DateSelector';\r\nimport Billing from './Billing';\r\n\r\nconst _MS_PER_DAY = 1000 * 60 * 60 * 24;\r\n\r\n// a and b are javascript Date objects\r\nfunction dateDiffInDays(a, b) {\r\n  // Discard the time and time-zone information.\r\n  const utc1 = Date.UTC(a.getFullYear(), a.getMonth(), a.getDate());\r\n  const utc2 = Date.UTC(b.getFullYear(), b.getMonth(), b.getDate());\r\n\r\n  return Math.floor((utc2 - utc1) / _MS_PER_DAY);\r\n}\r\n \r\n    \r\n\r\nclass Booking extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const today =  new Date();\r\n        const checkout = new Date();\r\n        checkout.setDate(today.getDate() + 1);\r\n\r\n        this.state = {\r\n            checkinDate: today,\r\n            checkoutDate: checkout,\r\n            occupants: 1,\r\n            roomType: 'Standard'\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const totalDays = dateDiffInDays(state.checkinDate, state.checkoutDate);\r\n        const invalidRange =  (totalDays <= 0 || totalDays >= 10)\r\n        \r\n        return {\r\n            totalDays,\r\n            invalidRange\r\n        }\r\n    }\r\n\r\n\r\n    onCheckinChange = (checkinDate) => {\r\n        this.setState({\r\n            checkinDate\r\n        })\r\n    }\r\n\r\n    onCheckoutChange = (checkoutDate) => {\r\n        this.setState({\r\n            checkoutDate\r\n        })\r\n    }\r\n\r\n\r\n    onOccupantsChange = (occupants) => {\r\n        this.setState({\r\n            occupants\r\n        })\r\n    }\r\n     \r\n\r\n    onRoomTypeChange = (roomType) => {\r\n        this.setState({\r\n            roomType\r\n        })\r\n    }\r\n     \r\n    \r\n    render() {\r\n        return (\r\n            <div style={{ backgroundColor: '#f2f2f2' }}>\r\n                <h2>Booking</h2>\r\n\r\n                <DateSelector checkinDate = {this.state.checkinDate} \r\n                              checkoutDate = {this.state.checkoutDate}\r\n                              totalDays = {this.state.totalDays}\r\n                              invalidRange = {this.state.invalidRange}\r\n                              onCheckinChange = {this.onCheckinChange}\r\n                              onCheckoutChange = {this.onCheckoutChange}\r\n                />\r\n                <RoomDetail occupants={this.state.occupants}\r\n                            roomType={this.state.roomType}\r\n                            onRoomTypeChange = {this.onRoomTypeChange}\r\n                            onOccupantsChange = {this.onOccupantsChange}\r\n                \r\n                />\r\n\r\n                { !this.state.invalidRange \r\n                    && \r\n                    <Billing roomType={this.state.roomType}\r\n                              totalDays = {this.state.totalDays} \r\n                              occupants = {this.state.occupants}\r\n                              /> }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Booking;","import React, { Component } from 'react';\r\nimport Booking from './components/Booking';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div >\r\n        <h2>Hotel Booking</h2>\r\n        <Booking />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}